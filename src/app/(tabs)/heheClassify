// import { ExternalLink } from '@tamagui/lucide-icons'
// import { Anchor, H2, Paragraph, XStack, YStack, SizableText, Button } from 'tamagui'
// import { ToastControl } from '../CurrentToast'
// import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
// import { useState, useRef, useEffect } from 'react';
// // import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
// import { StyleSheet, Image } from 'react-native'
// import * as tf from '@tensorflow/tfjs';
// import '@tensorflow/tfjs-react-native'; // Required for TensorFlow.js in React Nat

// import * as ImageManipulator from 'expo-image-manipulator';
// import { Asset } from 'expo-asset';
// import { bundleResourceIO } from '@tensorflow/tfjs-react-native';



// export default function ClassificationScreen() {
//     const [facing, setFacing] = useState<CameraType>('back');
//     const [permission, requestPermission] = useCameraPermissions();
//     const [isTfReady, setIsTfReady] = useState(false);
//     const [classification, setClassification] = useState(null);
//     const cameraRef = useRef(null);






//     // Ensure TensorFlow is ready before classifying
//     useEffect(() => {
//         const initializeTf = async () => {
//             await tf.ready();
//             setIsTfReady(true);
//         };
//         initializeTf();
//     }, []);







//     if (!permission) {
//         // Camera permissions are still loading.
//         return <YStack />;
//     }

//     if (!permission.granted) {
//         // Camera permissions are not granted yet.
//         return (
//             <YStack >
//                 <SizableText>We need your permission to show the camera</SizableText>
//                 <Button onPress={requestPermission} >grant permission</Button>
//             </YStack>
//         );
//     }

//     function toggleCameraFacing() {
//         setFacing(current => (current === 'back' ? 'front' : 'back'));
//     }










//     const captureAndClassify = async () => {

//         if (!cameraRef.current) return console.log("no camera ref");
//         console.log("dsauidsag")
//         const photo = await cameraRef.current.takePictureAsync();
//         const manipulatedImage = await ImageManipulator.manipulateAsync(photo.uri, [{ resize: { width: 224, height: 224 } }], { base64: true });

//         const imageTensor = tf.browser.fromPixels({
//             width: 224,
//             height: 224,
//             data: Buffer.from(manipulatedImage.base64, 'base64'),
//         });

//         classifyImage(imageTensor);


//     };



//     const classifyImage = async (imageTensor) => {
//         // // Load model files from the app bundle
//         // const modelJson = require('../../../assets/model/model.json');
//         // const modelWeights = require('../../../assets/model/weights.bin');

//         // // Use bundleResourceIO to create a model configuration with bundled assets
//         // const model = await tf.loadLayersModel(
//         //     bundleResourceIO(modelJson, [modelWeights])
//         // );

//         // // Perform classification with the loaded model
//         // const prediction = model.predict(imageTensor.expandDims(0));
//         // prediction.dispose();
//         // imageTensor.dispose();

//         // const classIdx = prediction.argMax(-1).dataSync()[0];
//         // const classes = ["Potassium Deficiency", "Phosphorus Deficiency", "Nitrogen Deficiency"]; // Replace with your actual class names
//         // setClassification(classes[classIdx]);



//         console.log("image classifiedd")

//     }



//     return (
//         // <YStack f={1} ai="center" gap="$8" px="$10" pt="$5">
//         //     <XStack ai="center" jc="center" fw="wrap" gap="$1.5" pos="absolute" b="$8">
//         //         <Paragraph>
//         //         </Paragraph>
//         //     </XStack>
//         // </YStack>

//         <YStack flex={1}>
//             <CameraView style={styles.camera} facing={facing} ref={cameraRef}>
//                 <YStack >
//                     <Button onPress={toggleCameraFacing}>
//                         <SizableText >Flip Camera</SizableText>
//                     </Button>
//                 </YStack>
//             </CameraView>

//             {/* Button to capture and classify the image */}
//             <YStack style={styles.buttonContainer}>
//                 <Button onPress={captureAndClassify} disabled={!isTfReady}>
//                     {isTfReady ? (<SizableText>Capture and Classify</SizableText>) : <SizableText>Waiting for Tensorflow...</SizableText>}
//                 </Button>
//             </YStack>

//             {/* Display Classification Result */}
//             {classification && (
//                 <SizableText style={styles.message}>
//                     Classification: {classification}
//                 </SizableText>
//             )}
//         </YStack>
//     )
// }

// const styles = StyleSheet.create({
//     container: {
//         flex: 1,
//         justifyContent: 'center',
//     },
//     message: {
//         textAlign: 'center',
//         paddingBottom: 10,
//     },
//     camera: {
//         flex: 1,
//     },
//     buttonContainer: {
//         flex: 1,
//         flexDirection: 'row',
//         backgroundColor: 'transparent',
//         margin: 64,
//     },
//     button: {
//         flex: 1,
//         alignSelf: 'flex-end',
//         alignItems: 'center',
//     },
//     text: {
//         fontSize: 24,
//         fontWeight: 'bold',
//         color: 'white',
//     },
// });